// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/douglmendes/mercado-fresco-round-go/internal/product_record/domain (interfaces: ProductRecordRepository,ProductRecordService)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	domain "github.com/douglmendes/mercado-fresco-round-go/internal/product_record/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockProductRecordRepository is a mock of ProductRecordRepository interface.
type MockProductRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRecordRepositoryMockRecorder
}

// MockProductRecordRepositoryMockRecorder is the mock recorder for MockProductRecordRepository.
type MockProductRecordRepositoryMockRecorder struct {
	mock *MockProductRecordRepository
}

// NewMockProductRecordRepository creates a new mock instance.
func NewMockProductRecordRepository(ctrl *gomock.Controller) *MockProductRecordRepository {
	mock := &MockProductRecordRepository{ctrl: ctrl}
	mock.recorder = &MockProductRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRecordRepository) EXPECT() *MockProductRecordRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductRecordRepository) Create(arg0 domain.ProductRecord) (domain.ProductRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.ProductRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductRecordRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductRecordRepository)(nil).Create), arg0)
}

// GetByProductId mocks base method.
func (m *MockProductRecordRepository) GetByProductId(arg0 int) ([]domain.ProductRecordCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductId", arg0)
	ret0, _ := ret[0].([]domain.ProductRecordCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductId indicates an expected call of GetByProductId.
func (mr *MockProductRecordRepositoryMockRecorder) GetByProductId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductId", reflect.TypeOf((*MockProductRecordRepository)(nil).GetByProductId), arg0)
}

// MockProductRecordService is a mock of ProductRecordService interface.
type MockProductRecordService struct {
	ctrl     *gomock.Controller
	recorder *MockProductRecordServiceMockRecorder
}

// MockProductRecordServiceMockRecorder is the mock recorder for MockProductRecordService.
type MockProductRecordServiceMockRecorder struct {
	mock *MockProductRecordService
}

// NewMockProductRecordService creates a new mock instance.
func NewMockProductRecordService(ctrl *gomock.Controller) *MockProductRecordService {
	mock := &MockProductRecordService{ctrl: ctrl}
	mock.recorder = &MockProductRecordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRecordService) EXPECT() *MockProductRecordServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductRecordService) Create(arg0 domain.ProductRecord) (domain.ProductRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.ProductRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductRecordServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductRecordService)(nil).Create), arg0)
}

// GetByProductId mocks base method.
func (m *MockProductRecordService) GetByProductId(arg0 int) ([]domain.ProductRecordCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductId", arg0)
	ret0, _ := ret[0].([]domain.ProductRecordCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductId indicates an expected call of GetByProductId.
func (mr *MockProductRecordServiceMockRecorder) GetByProductId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductId", reflect.TypeOf((*MockProductRecordService)(nil).GetByProductId), arg0)
}
