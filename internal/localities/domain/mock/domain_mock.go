// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	domain "github.com/douglmendes/mercado-fresco-round-go/internal/localities/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockLocalityRepository is a mock of LocalityRepository interface.
type MockLocalityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLocalityRepositoryMockRecorder
}

// MockLocalityRepositoryMockRecorder is the mock recorder for MockLocalityRepository.
type MockLocalityRepositoryMockRecorder struct {
	mock *MockLocalityRepository
}

// NewMockLocalityRepository creates a new mock instance.
func NewMockLocalityRepository(ctrl *gomock.Controller) *MockLocalityRepository {
	mock := &MockLocalityRepository{ctrl: ctrl}
	mock.recorder = &MockLocalityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalityRepository) EXPECT() *MockLocalityRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLocalityRepository) Create(ctx context.Context, zipCode, localityName, provinceName, countryName string) (domain.Locality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, zipCode, localityName, provinceName, countryName)
	ret0, _ := ret[0].(domain.Locality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLocalityRepositoryMockRecorder) Create(ctx, zipCode, localityName, provinceName, countryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLocalityRepository)(nil).Create), ctx, zipCode, localityName, provinceName, countryName)
}

// GetAll mocks base method.
func (m *MockLocalityRepository) GetAll(ctx context.Context) ([]domain.Locality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Locality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockLocalityRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLocalityRepository)(nil).GetAll), ctx)
}

// GetByCarriers mocks base method.
func (m *MockLocalityRepository) GetByCarriers(ctx context.Context, id int) ([]domain.CarriersByLocality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCarriers", ctx, id)
	ret0, _ := ret[0].([]domain.CarriersByLocality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCarriers indicates an expected call of GetByCarriers.
func (mr *MockLocalityRepositoryMockRecorder) GetByCarriers(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCarriers", reflect.TypeOf((*MockLocalityRepository)(nil).GetByCarriers), ctx, id)
}

// GetById mocks base method.
func (m *MockLocalityRepository) GetById(ctx context.Context, id int) (domain.Locality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.Locality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockLocalityRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockLocalityRepository)(nil).GetById), ctx, id)
}

// GetBySellers mocks base method.
func (m *MockLocalityRepository) GetBySellers(ctx context.Context, id int) ([]domain.SellersByLocality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySellers", ctx, id)
	ret0, _ := ret[0].([]domain.SellersByLocality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySellers indicates an expected call of GetBySellers.
func (mr *MockLocalityRepositoryMockRecorder) GetBySellers(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySellers", reflect.TypeOf((*MockLocalityRepository)(nil).GetBySellers), ctx, id)
}

// MockLocalityService is a mock of LocalityService interface.
type MockLocalityService struct {
	ctrl     *gomock.Controller
	recorder *MockLocalityServiceMockRecorder
}

// MockLocalityServiceMockRecorder is the mock recorder for MockLocalityService.
type MockLocalityServiceMockRecorder struct {
	mock *MockLocalityService
}

// NewMockLocalityService creates a new mock instance.
func NewMockLocalityService(ctrl *gomock.Controller) *MockLocalityService {
	mock := &MockLocalityService{ctrl: ctrl}
	mock.recorder = &MockLocalityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalityService) EXPECT() *MockLocalityServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLocalityService) Create(ctx context.Context, zipCode, localityName, provinceName, countryName string) (domain.Locality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, zipCode, localityName, provinceName, countryName)
	ret0, _ := ret[0].(domain.Locality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLocalityServiceMockRecorder) Create(ctx, zipCode, localityName, provinceName, countryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLocalityService)(nil).Create), ctx, zipCode, localityName, provinceName, countryName)
}

// GetByCarriers mocks base method.
func (m *MockLocalityService) GetByCarriers(ctx context.Context, id int) ([]domain.CarriersByLocality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCarriers", ctx, id)
	ret0, _ := ret[0].([]domain.CarriersByLocality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCarriers indicates an expected call of GetByCarriers.
func (mr *MockLocalityServiceMockRecorder) GetByCarriers(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCarriers", reflect.TypeOf((*MockLocalityService)(nil).GetByCarriers), ctx, id)
}

// GetBySellers mocks base method.
func (m *MockLocalityService) GetBySellers(ctx context.Context, id int) ([]domain.SellersByLocality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySellers", ctx, id)
	ret0, _ := ret[0].([]domain.SellersByLocality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySellers indicates an expected call of GetBySellers.
func (mr *MockLocalityServiceMockRecorder) GetBySellers(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySellers", reflect.TypeOf((*MockLocalityService)(nil).GetBySellers), ctx, id)
}
