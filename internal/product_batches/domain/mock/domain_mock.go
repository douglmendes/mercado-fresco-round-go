// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/product_batches/domain/domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	domain "github.com/douglmendes/mercado-fresco-round-go/internal/product_batches/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockProductBatchesRepository is a mock of ProductBatchesRepository interface.
type MockProductBatchesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductBatchesRepositoryMockRecorder
}

// MockProductBatchesRepositoryMockRecorder is the mock recorder for MockProductBatchesRepository.
type MockProductBatchesRepositoryMockRecorder struct {
	mock *MockProductBatchesRepository
}

// NewMockProductBatchesRepository creates a new mock instance.
func NewMockProductBatchesRepository(ctrl *gomock.Controller) *MockProductBatchesRepository {
	mock := &MockProductBatchesRepository{ctrl: ctrl}
	mock.recorder = &MockProductBatchesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductBatchesRepository) EXPECT() *MockProductBatchesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductBatchesRepository) Create(ctx context.Context, batchNumber, currentQuantity, currentTemperature int, dueDate string, initialQuantity int, manufacturingDate string, manufacturingHour, minimumTemperature, productId, sectionId int) (*domain.ProductBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, batchNumber, currentQuantity, currentTemperature, dueDate, initialQuantity, manufacturingDate, manufacturingHour, minimumTemperature, productId, sectionId)
	ret0, _ := ret[0].(*domain.ProductBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductBatchesRepositoryMockRecorder) Create(ctx, batchNumber, currentQuantity, currentTemperature, dueDate, initialQuantity, manufacturingDate, manufacturingHour, minimumTemperature, productId, sectionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductBatchesRepository)(nil).Create), ctx, batchNumber, currentQuantity, currentTemperature, dueDate, initialQuantity, manufacturingDate, manufacturingHour, minimumTemperature, productId, sectionId)
}

// GetAll mocks base method.
func (m *MockProductBatchesRepository) GetAll(ctx context.Context) ([]domain.ProductBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.ProductBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductBatchesRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProductBatchesRepository)(nil).GetAll), ctx)
}

// GetBySectionId mocks base method.
func (m *MockProductBatchesRepository) GetBySectionId(ctx context.Context, sectionId int) ([]domain.SectionRecords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySectionId", ctx, sectionId)
	ret0, _ := ret[0].([]domain.SectionRecords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySectionId indicates an expected call of GetBySectionId.
func (mr *MockProductBatchesRepositoryMockRecorder) GetBySectionId(ctx, sectionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySectionId", reflect.TypeOf((*MockProductBatchesRepository)(nil).GetBySectionId), ctx, sectionId)
}

// MockProductBatchesService is a mock of ProductBatchesService interface.
type MockProductBatchesService struct {
	ctrl     *gomock.Controller
	recorder *MockProductBatchesServiceMockRecorder
}

// MockProductBatchesServiceMockRecorder is the mock recorder for MockProductBatchesService.
type MockProductBatchesServiceMockRecorder struct {
	mock *MockProductBatchesService
}

// NewMockProductBatchesService creates a new mock instance.
func NewMockProductBatchesService(ctrl *gomock.Controller) *MockProductBatchesService {
	mock := &MockProductBatchesService{ctrl: ctrl}
	mock.recorder = &MockProductBatchesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductBatchesService) EXPECT() *MockProductBatchesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductBatchesService) Create(ctx context.Context, batchNumber, currentQuantity, currentTemperature int, dueDate string, initialQuantity int, manufacturingDate string, manufacturingHour, minimumTemperature, productId, sectionId int) (*domain.ProductBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, batchNumber, currentQuantity, currentTemperature, dueDate, initialQuantity, manufacturingDate, manufacturingHour, minimumTemperature, productId, sectionId)
	ret0, _ := ret[0].(*domain.ProductBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductBatchesServiceMockRecorder) Create(ctx, batchNumber, currentQuantity, currentTemperature, dueDate, initialQuantity, manufacturingDate, manufacturingHour, minimumTemperature, productId, sectionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductBatchesService)(nil).Create), ctx, batchNumber, currentQuantity, currentTemperature, dueDate, initialQuantity, manufacturingDate, manufacturingHour, minimumTemperature, productId, sectionId)
}

// GetBySectionId mocks base method.
func (m *MockProductBatchesService) GetBySectionId(ctx context.Context, sectionId int) ([]domain.SectionRecords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySectionId", ctx, sectionId)
	ret0, _ := ret[0].([]domain.SectionRecords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySectionId indicates an expected call of GetBySectionId.
func (mr *MockProductBatchesServiceMockRecorder) GetBySectionId(ctx, sectionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySectionId", reflect.TypeOf((*MockProductBatchesService)(nil).GetBySectionId), ctx, sectionId)
}
